{"name":"Lilacs","tagline":"An Instant database and REST API for your web and/or mobile apps.","body":"<center><img src=\"https://raw.github.com/ricardoalcocer/lilacs/master/public/images/retro_flower_1_color_colour_lilac_peace-999px.png\" width=\"200\">\r\n\r\n<h1>LilACS (Beta)</h1>\r\n\r\n</center>\r\n\r\n\r\nLilACS (Li'l ACS) is a combiantion of Node.ACS (to expose an API) + ACS (as a data store), that will provide you with an instant API for you mobile or web app.\r\n\r\n---\r\n# Installation\r\n---\r\n\r\nThe steps to get LilACS are:\r\n\r\n## 1. Install ACS if you don't already have it: \r\n\r\n```\r\n$ [sudo] npm install acs -g\r\n```\r\n\r\n## 2. Login to ACS: \r\n\r\n```\r\n$ acs login\r\n```\r\n\r\n## 3. Create ACS App\r\n\r\nGo to https://my.appcelerator.com/apps and create an ACS-only app.  Open this app, create an admin user and grab the ACS Key and ACS Secret\r\n\r\n\r\n## 4. Clone LilACS \r\n\r\n```\r\n$ git clone https://github.com/ricardoalcocer/lilacs.git\r\n```\r\n\r\n## 5. Add settings\r\n\r\nOpen **/lib/lilacs_template.js** and add your ACS Keys and admin user info.  Save this file as **/lib/lilacs.js**\r\n\r\n## 6. Launch and run\r\n* From a terminal, go to your project folder and run it: \r\n\r\n```\r\n$ acs run\r\n```\r\n* Point your browser to http://localhost:8080.  LilACS should be running\r\n\r\n## 7. When ready to publish\r\n\r\n```\r\n$ acs publish --force\r\n```\r\n\r\nACS will return a public URL for your API.\r\n\r\n\r\n---\r\n# Usage\r\n---\r\n\r\nOnce you have LilACS running, your backend is ready to start receiving requests at http://your_domain:port/api/xxxxx.  \r\n\r\n### The basics\r\nRecords are added to **datasets**.  Your base url will allways be:\r\n\r\n```\r\nhttp://yourhost/api\r\n```\r\n\r\nThe next querystring parameter is the **dataset**, so if your **dataset** is employees, your URL will be:\r\n\r\n```\r\nhttp://yourhost/api/employees\r\n```\r\n\r\n### Adding records\r\n\r\nRecords are added via HTTP Post.  Simply post a JavaScript Object in the **data** variable to http://yourhost/api/set.  For example:\r\n\r\n\r\nExample object:\r\n```\r\n{\r\n\tname: 'Ricardo',\r\n\tlname: 'Alcocer,\r\n\tdepartment: 'Finance'\r\n}\r\n```\r\n\r\nTo add this record to the employee **dataset**, simply **POST** the data via HTTP.  Data needs to be sent in a variable named **data**.\r\n\r\n```\r\nhttp://yourhost/api/employees/set\r\n\r\n```\r\n\r\n### Updating records\r\n\r\nUpdating is similar to Adding, but simply call **/edit** and **POST** the variable **id** along with **data**, id being the id of the record to update.  Your record will be replaced with the newly posted one.\r\n\r\n```\r\nhttp://yourhost/api/employees/edit\r\n\r\n```\r\n\r\n### Deleting records\r\n\r\nTo delete simply call **/delete** and **POST** the variable **id**, id being the id of the record to remove.  In case you wish to delete more than one record, sent the variable **ids** instead and all record ids separated by commas.\r\n\r\n```\r\nhttp://yourhost/api/employees/delete\r\n\r\n```\r\n\r\n## Querying records\r\n\r\nRight after adding your first record, a full REST API will be exposed to you to manage the data, in our example located at:\r\n\r\n```\r\nhttp://yourhost/api/employees/get/all\r\n```\r\n\r\n**LilACS** exposes the following arguments from the ACS 'query' method:\r\n\r\n* where (exposed as get. allows comma-separated list of value-pairs)\r\n* classname (exposed as the first paramenter after /api)\r\n* order (allows comma-separated list of columns and minus sign (-) for inverse sort order)\r\n* page\r\n* per_page\r\n* limit\r\n* skip\r\n* columns (allows comma-separated list of columns to get in your result set)\r\n\r\n## Use-cases \r\n\r\n**Get all records from employees where department='Finance'**\r\n\r\n```\r\nhttp://yourhost/api/employees/get/department='Finance'\r\n```\r\n**Get all employees ordered by name**\r\n\r\n```\r\nhttp://yourhost/api/employees/get/all/order/name\r\n```\r\n\r\n**Get all employees ordered by name but only the id and name columns**\r\n\r\n```\r\nhttp://yourhost/api/employees/get/all/order/name/columns/id,name\r\n```\r\n\r\n**Get all employees where name='Ricardo' and order by creation date descending**\r\n\r\n```\r\nhttp://yourhost/api/employees/name=\"Ricardo\"/order/-created_at\r\n```\r\n\r\n**Get all employees where name=\"Ricardo\" and department=\"Finance\" order by creation date descending**\r\n\r\n```\r\nhttp://yourhost/api/employees/name=\"Ricardo\",department=\"Finance\"/order/-created_at\r\n```\r\nNote: Allowed logical operators are: =, >, <, >=, <= and !=\r\n\r\n**Pagination : Previous example, but in pages of 10 records each**\r\n\r\n```\r\nhttp://yourhost/api/employees/name='Ricardo'/order/-created_at/per_page/10/page/1\r\n```\r\n\r\n**NOTE**\r\nQuerystring parameters are value pairs, for example when querying a page, the URL looks like **/page/1**, where page is the variable and 1 is the value.  In case a parameter can receive multiple values, they are separated by commas.\r\n\r\n# Databrowser\r\nA data browser is provided at http://yourhost/admin.  You can browse through your datasets, edit and delete data.\r\n\r\n---\r\n# Stuff to-do and in-the-works\r\n---\r\n\r\n## Events\r\nMechanism for adding onSet, onEdit, onValidate, onDelete events.  Initial tests are located in the file **/lib/lilacsevents**.js\r\n\r\n---\r\n# Contribuitors\r\n---\r\n\r\n* Ricardo Alcocer\r\n\r\nPull requests are encouraged\r\n\r\n\r\n---\r\n# License\r\n---\r\n\r\nLicensed under the terms of the MIT License | [http://alco.mit-license.org/](http://alco.mit-license.org/)\r\n","google":"UA-45566694-1","note":"Don't delete this file! It's used internally to help with page regeneration."}